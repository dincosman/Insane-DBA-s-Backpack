---
- hosts: dbservers
  vars:
    NEWDBHOME: /u01/app/oracle/product/19.22/dbhome_1
    OLDDBHOME: /u01/app/oracle/product/19.20/dbhome
    patch_dir: /u01/app/Setup
    recovery_script_dest_dir: /home/oracle
    recovery_script_dir: /etc/ansible/projects
  remote_user: oracle
  tasks:

  - name: remove response file from stage directory
    file: path={{ patch_dir }}/db_oop1922.rsp state=absent

  - name: Copy old db home dependent network files to the new db home
    copy:
      src: "{{ OLDDBHOME }}/network/admin/"
      dest: "{{ NEWDBHOME }}/network/admin/"
      owner: oracle
      group: oinstall
      remote_src: yes

  - name: Copy old db home dependent dbs parameter files to the new db home
    copy:
      src: "{{ OLDDBHOME }}/dbs/"
      dest: "{{ NEWDBHOME }}/dbs/"
      owner: oracle
      group: oinstall
      remote_src: yes

  - name: Copy old db home dependent customized files to the new db home
    copy:
      src: "{{ OLDDBHOME }}/sqlplus/admin/glogin.sql"
      dest: "{{ NEWDBHOME }}/sqlplus/admin/"
      owner: oracle
      group: oinstall
      remote_src: yes

  - name: replace old_dbhome value in .bashrc files with the new_dbhome value 
    action: shell sed -i 's@19.3/dbhome@19.22/dbhome_1@g' /root/.bashrc; sed -i 's@19.3/dbhome@19.22/dbhome_1@g' /home/oracle/.bashrc
    args:
      warn: false

  - name: relink unified auditing in new_dbhome
    action: shell export NEWDBHOME={{ NEWDBHOME}}; cd $NEWDBHOME/rdbms/lib; export ORACLE_HOME={{ NEWDBHOME}}; make -f ins_rdbms.mk uniaud_on ioracle

  - name: register databases
    action: shell ps -ef | grep  ora_pmon | grep -v grep | awk '{ print $NF }' | cut -c10-50 |  awk '{print substr($1, 1, length($1)-1)}'
    register: find_databases

  - name: register instances
    action: shell ps -ef | grep  ora_pmon | grep -v grep | awk '{ print $NF }' | cut -c10-50 
    register: find_instances

  - name: modify databases with srvctl to run from new_dbhome
    action: shell srvctl modify database -d {{ item }} -oraclehome {{ NEWDBHOME }}
    with_items: "{{ find_databases.stdout_lines }}"
    run_once: true

  - name: bounce instances and start from new_dbhome
    action: shell export dbname=$(echo {{ item }} |  awk '{print substr($1, 1, length($1)-1)}'); srvctl stop instance -d $dbname -i {{ item }} -f; srvctl start instance -d $dbname -i {{ item }}
    with_items: "{{ find_instances.stdout_lines }}"
    throttle: 1

  - name: Copy start recovery file to remote server
    copy: 
      src: "{{ recovery_script_dir }}/start_recover_onremote.sh"
      dest: "{{ recovery_script_dest_dir }}"
      owner: oracle
      group: oinstall
      mode: '750'
    
  - name: start_recovery
    action: shell {{ recovery_script_dest_dir }}/start_recover_onremote.sh {{ item }} {{ NEWDBHOME }}
    with_items: "{{ find_instances.stdout_lines }}"
    register: recovery_output
    
  - debug:
      var: item.stdout
    with_items: "{{ recovery_output['results'] }}"
